% BENCHMARK_MAKE compiles benchmark

% Add sub-directories to path
fpath = fileparts(mfilename('fullpath'));
for subd = {'algorithms','problems','utils'}
    addpath([fpath filesep() subd{:}]);
end
problemsd = dir([fpath filesep() 'problems' filesep() '*'])';
for subd = problemsd
    if subd.isdir && ~strcmp(subd.name,'.') && ~strcmp(subd.name,'..')
        addpath([fpath filesep() 'problems' filesep subd.name]);
    end
end

mcc -o benchmark ...
    -W WinMain:benchmark ...
    -T link:exe ...
    -R -singleCompThread -R -nojvm ...
    -w enable:specified_file_mismatch -w enable:repeated_file -w enable:switch_ignored -w enable:missing_lib_sentinel -w enable:demo_license ...
    -v benchmark_run.m ...
    -a benchmark_defaults.m -a benchmark_func.m -a extractnum.m ...
    -a linexp.m -a linlog.m -a cmaes.m -a problem_ccn15.m -a problem_cec14.m ...
    -a algorithm_bga.m -a algorithm_cmaes.m -a algorithm_fmincon.m ...
    -a algorithm_fminsearch.m -a algorithm_ga.m -a algorithm_gaoptions.m ...
    -a algorithm_mcs.m -a algorithm_multibayes.m -a algorithm_particleswarm.m ...
    -a algorithm_patternsearch.m -a algorithm_bps.m  ...
    -a cec14_eotp_functions_revised.m -a cec14_eotp_problems.m ...
    -a cec14_eotp_test_rs.m -a cec14_rotate_shift_revised.m ...
    -a bps.m ...
    -a minimizebnd.m -a gpHyperOptimize.m -a gpTrainingSet.m ...
    -a fitnessTransform.m  -a gpHyperSample.m -a gpgrad.m -a gphess.m ...
    -a gppredcheck.m -a gppriorrnd.m -a gpset.m  -a mcs_gp_optimizer.m ...
    -a swtest.m ...
    -a searchCombine.m -a searchGrid.m -a searchNewton.m -a searchOptim.m ...
    -a searchSeries.m -a searchWCM.m ...
    -a acqNegEI.m -a acqRnd.m -a acqLCB.m ...
    -a gpdefStationary.m -a gpdefStationaryhess.m ...
    -a pollMADS2N.m -a pollGPS2N.m ...
    -a initSobol.m -a initUniform.m 
    

    

    